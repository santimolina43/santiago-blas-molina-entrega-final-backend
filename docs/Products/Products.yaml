paths:
  /api/products:
    get:
      summary: Obtiene los productos
      tags:
        - Products
      parameters:
      - name: limit
        in: query
        description: indica la cantidad limite maxima de productos que se desea que devuelva la peticion
        schema:
          $type: Number
      - name: page
        in: query
        description: indica el numero de pagina de productos que se desea devolver, donde cada pagina tiene como maximo la cantidad de productos definida en limit
        schema:
          $type: Number
      - name: category
        in: query
        description: indica la categoria de productos que se desea que la peticion devuelva
        schema:
          $type: String
      - name: stock
        in: query
        description: indica si se desea que la peticion devuelva unicamente los productos con stock mayor a cero, o no
        schema:
          $type: Number
      responses:
        "200":
          description: Los productos fueron obtenidos satisfactoriamente de la base de datos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos
    post:
      summary: Añade un nuevo producto a la base de datos
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content: 
          multipart/form-data:
            schema:
              $ref: '#/components/requestBodies/addProduct'
      responses:
        "200":
          description: Los productos fueron obtenidos satisfactoriamente de la base de datos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos
  
  /api/products/{pid}:
    get:
      summary: Obtiene el producto pasado por parametro en la ruta
      tags:
        - Products
      parameters:
      - name: pid
        in: path
        description: id del producto que devolvera la peticion
        schema:
          $type: String
      responses:
        "200":
          description: El producto se obtuvo satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos
    put:
      summary: Actualiza un producto a partir de su id
      tags:
        - Products
      parameters:
      - name: pid
        in: path
        required: true
        description: id del producto que se desea actualizar.
        schema:
          $type: String
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateProduct'
      responses:
        "200":
          description: El producto fue actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos
    delete:
      summary: Elimina un producto a partir de su id
      tags:
        - Products
      parameters:
      - name: pid
        in: path
        required: true
        description: id del producto que se desea eliminar.
        schema:
          $type: String
      responses:
        "200":
          description: El producto fue eliminado exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la base de datos

components:
  schemas:
    Products:
      type: object
      properties:
        _id: 
          type: ObjectId
          description: Id autogenerado de mongo
        title:
          type: String
          description: Titulo del producto
        description: 
          type: String
          description: Descripcion del producto
        price: 
          type: Number
          description: Precio del producto
        thumbnail:
          type: String
          format: binary
          description: Archivo de imagen del producto
        code:
          type: String
          description: Codigo de producto, es una propiedad única
        stock:
          type: Number
          description: Stock disponible del producto
        category:
          type: String
          description: Categoria del producto
        status:
          type: Boolean
          description: Indica si el producto esta activo o no, pero es una propiedad que no esta funcionalmente activa
        owner:
          type: String
          description: Email del usuario dueño del producto publicado
          $ref: '#/components/schemas/Users/properties/email'
      example:
        _id: ObjectId("63njn34uionw9843439ewoiehwkj")
        title: Caña de pescar
        description: Caña de pescar de tres tramos marca Okuma
        price: 70000
        thumbnail: motorhome.jpeg
        code: '#45421'
        stock: 20
        category: Cañas
        status: true
        owner: correomau@correo.com
      required:
        - title
        - description
        - price
        - code
        - stock
        - category
        - status
        - owner
    Users:
      type: object
      properties:
        _id: 
          type: ObjectId
          description: Id autogenerado de mongo
        first_name:
          type: String
          description: Nombre del usuario
        last_name: 
          type: String
          description: Apellido del usuario
        email: 
          type: String
          description: Correo del usuario, este campo es único
        age: 
          type: Number
          description: Edad del usuario
        password:
          type: String
          description: Contraseña hasheada del usuario
        cart:
          type: String
          description: Carrito del usuario. Este campo esta referenciado con los ID del schema de carritos
          $ref: '#/components/schemas/Carts/properties/_id'
        role:
          type: String
          description: Rol del usuario, puede ser 'user', 'premium' o 'admin' y por defecto es 'user'
      example:
        _id: ObjectId("63njn34uionw9843439ewoiehwkj")
        first_name: Mauricio
        last_name: Espinosa
        email: correomau@correo.com
        age: 30
        password: 293475rbhjneko32094820owijeur4932okewjrur5u849302owkdjfrui9843ow
        cart: ObjectId('657114dae77ebe079b2c115a')
        role: 'user'
      required:
        - first_name
        - last_name
        - email
        - age
        - password
        - cart
    Carts:
      type: object
      properties:
        _id: 
          type: ObjectId
          description: Id autogenerado de mongo
        products:
          type: array
          items:
            type: object
            properties:
              product:
                type: ObjectId
                description: Id del producto que pertenece al carrito
                $ref: '#/components/schemas/Products/properties/_id'
              quantity:
                type: Number
                description: Cantidad de veces que esta añadido el producto al carrito
      example:
        products:
          - product:
              _id: ObjectId("63njn34uionw9843439ewoiehwkj")
            quantity: 2
  securitySchemas:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    addProduct:
      type: object
      properties: 
        title:
          type: String
          description: Titulo del producto
        description: 
          type: String
          description: Descripcion del producto
        price: 
          type: Number
          description: Precio del producto
        thumbnail:
          type: file
          format: binary
          description: Archivo de imagen del producto
        code:
          type: String
          description: Codigo de producto, es una propiedad única
        stock:
          type: Number
          description: Stock disponible del producto
        category:
          type: String
          description: Categoria del producto
        status:
          type: Boolean
          description: Indica si el producto esta activo o no, pero es una propiedad que no esta funcionalmente activa
      example:
        title: Caña de pesca con mosca
        description: Caña para FlyCast de 4 tramos nº6 marca Rise
        price: 300000
        thumbnail: motorhome.jpeg
        code: '#32003'
        stock: 10
        category: Cañas
        status: true
    updateProduct:
      type: object
      properties:
        title:
          type: String
          description: Titulo del producto
        description: 
          type: String
          description: Descripcion del producto
        price: 
          type: Number
          description: Precio del producto
        thumbnail:
          type: String
          format: binary
          description: Archivo de imagen del producto
        code:
          type: String
          description: Codigo de producto, es una propiedad única
        stock:
          type: Number
          description: Stock disponible del producto
        category:
          type: String
          description: Categoria del producto
        status:
          type: Boolean
          description: Indica si el producto esta activo o no, pero es una propiedad que no esta funcionalmente activa
      example:
        description: producto actualizado desde swagger
        price: 100